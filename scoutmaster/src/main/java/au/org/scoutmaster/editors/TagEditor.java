package au.org.scoutmaster.editors;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.vaadin.dialogs.ConfirmDialog;import au.com.vaadinutils.crud.ValidatingFieldGroup;import au.com.vaadinutils.editors.DialogListener;import au.com.vaadinutils.listener.ClickEventLogged;import au.com.vaadinutils.listener.ClickEventLogged.ClickListener;import au.org.scoutmaster.domain.Tag;import au.org.scoutmaster.util.SMFormHelper;import com.vaadin.data.fieldgroup.FieldGroup.CommitException;import com.vaadin.data.util.BeanItem;import com.vaadin.ui.Alignment;import com.vaadin.ui.Button;import com.vaadin.ui.Button.ClickEvent;import com.vaadin.ui.FormLayout;import com.vaadin.ui.HorizontalLayout;import com.vaadin.ui.TextField;import com.vaadin.ui.UI;import com.vaadin.ui.VerticalLayout;import com.vaadin.ui.Window;/** * Provides a modal dialog which prompts a user to complete the creation of a * tag. * * The tag name is already populated and the user has the chance to enter a * description and then save or cancel the operation. * * Pass in a listener to be notified of the result of the save/cancel buttons. * * @author bsutton * */public class TagEditor extends Window{	private static Logger logger = LogManager.getLogger(TagEditor.class);	private static final long serialVersionUID = 1L;	private final Tag tag;	public ValidatingFieldGroup<Tag> fieldGroup;	public FormLayout formLayout = new FormLayout();	private final SMFormHelper<Tag> commonHelp;	public TagEditor(final Tag tag, final DialogListener<Tag> listener)	{		super("New Tag");		new ConfirmDialog();		this.tag = tag;		final VerticalLayout l = new VerticalLayout();		l.setMargin(true);		this.fieldGroup = new ValidatingFieldGroup<Tag>(new BeanItem<Tag>(this.tag), Tag.class);		this.commonHelp = new SMFormHelper<Tag>(this.formLayout, this.fieldGroup);		this.commonHelp.bindTextField("Tag Name", Tag.NAME);		final TextField description = this.commonHelp.bindTextField("Description", Tag.DESCRIPTION);		l.addComponent(this.formLayout);		// layout buttons horizontally		final HorizontalLayout hz = new HorizontalLayout();		l.addComponent(hz);		hz.setSpacing(true);		hz.setWidth("100%");		final Button dont = new Button("Don't add", new ClickEventLogged.ClickListener()		{			private static final long serialVersionUID = -1198191849568844582L;			@Override			public void clicked(final ClickEvent event)			{				// tokenField.addToken(TagEditor.this.tag.getId());				UI.getCurrent().removeWindow(TagEditor.this);				listener.declined();			}		});		hz.addComponent(dont);		hz.setComponentAlignment(dont, Alignment.MIDDLE_LEFT);		final Button add = new Button("Add Tag", new ClickListener()		{			private static final long serialVersionUID = 1L;			@Override			public void clicked(final ClickEvent event)			{				try				{					TagEditor.this.fieldGroup.commit();					UI.getCurrent().removeWindow(TagEditor.this);					listener.confirmed(TagEditor.this.tag);				}				catch (final CommitException e)				{					TagEditor.logger.error(e, e);				}			}		});		add.addStyleName("default");		hz.addComponent(add);		hz.setComponentAlignment(add, Alignment.MIDDLE_RIGHT);		setContent(l);		setModal(true);		center();		setWidth("500px");		setStyleName("black");		setResizable(false);		description.focus();	}}