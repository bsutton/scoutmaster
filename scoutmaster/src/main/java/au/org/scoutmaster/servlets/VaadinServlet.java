package au.org.scoutmaster.servlets;

import java.util.List;

import javax.servlet.ServletException;

import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.parser.Tag;

import com.vaadin.server.BootstrapFragmentResponse;
import com.vaadin.server.BootstrapPageResponse;
import com.vaadin.server.SessionInitEvent;
import com.vaadin.server.SessionInitListener;

public class VaadinServlet extends com.vaadin.server.VaadinServlet
{
	private static final long serialVersionUID = 1L;

	static class BootstrapListener implements com.vaadin.server.BootstrapListener
	{
		private static final long serialVersionUID = 1L;

		@Override
		public void modifyBootstrapPage(BootstrapPageResponse response)
		{
			Element head = response.getDocument().head();
			// head = new Element(Tag.valueOf("div"), "");

			// Favicons and links generated by
			// http://realfavicongenerator.net/
			//

			addLink(head, "rel=shortcut icon", "href=/images/favicon.ico");
			addLink(head, "rel=icon", "type=image/png", "href=/images/favicon-32x32.png", "sizes=32x32");
			addLink(head, "rel=icon", "type=image/png", "href=/images/favicon-96x96.png", "sizes=96x96");
			addLink(head, "rel=icon", "type=image/png", "href=/images/favicon-16x16.png", "sizes=16x16");

			// Apple icons
			// addLink(head, "apple-touch-icon", "57x57",
			// "/images/apple-touch-icon-57x57.png");
			// addLink(head, "apple-touch-icon", "60x60",
			// "/images/apple-touch-icon-60x60.png");
			// addLink(head, "apple-touch-icon", "72x72",
			// "/images/apple-touch-icon-72x72.png");
			// addLink(head, "apple-touch-icon", "76x76",
			// "/images/apple-touch-icon-76x76.png");
			// addLink(head, "apple-touch-icon", "114x114",
			// "/images/apple-touch-icon-114x114.png");
			// addLink(head, "apple-touch-icon", "120x120",
			// "/images/apple-touch-icon-120x120.png");
			// addLink(head, "apple-touch-icon", "144x144",
			// "/images/apple-touch-icon-144x144.png");
			// addLink(head, "apple-touch-icon", "152x152",
			// "/images/apple-touch-icon-152x152.png");
			// addMeta(head, "name=theme-color", "content=#ffffff");

			// Android
			// addLink(head, "rel=manifest", "href=/images/manifest.json");

			// Safari
			// addLink(head, "rel=mask-icon",
			// "href=/images/safari-pinned-tab.svg", "color=#5bbad5");

			// MS
			// addMeta(head, "name=msapplication-TileColor", "content=#da532c");
			// addMeta(head, "name=msapplication-TileImage",
			// "content=/images/mstile-144x144.png");
			// addMeta(head, "name=msapplication-config",
			// "content=/images/browserconfig.xml");

		}

		@SuppressWarnings("unused")
		private void addMeta(Element head, String... attributes)
		{
			Attributes attr = new Attributes();

			for (String attribute : attributes)
			{
				String[] keyValue = attribute.split("=");
				String key = keyValue[0];
				String value = keyValue[1];
				attr.put(key, value);
			}
			Element linkElement = new Element(Tag.valueOf("meta"), "", attr);
			head.appendChild(linkElement);

		}

		private void addLink(Element head, String... attributes)
		{
			Attributes attr = new Attributes();

			for (String attribute : attributes)
			{
				String[] keyValue = attribute.split("=");
				String key = keyValue[0];
				String value = keyValue[1];
				attr.put(key, value);
			}
			Element linkElement = new Element(Tag.valueOf("link"), "", attr);
			head.appendChild(linkElement);

		}

		@SuppressWarnings("unused")
		private void addLink(Element head, String rel, String sizes, String href)
		{
			Attributes attr = new Attributes();
			attr.put("rel", rel);
			attr.put("sizes", sizes);
			attr.put("href", href);
			Element linkElement = new Element(Tag.valueOf("link"), "", attr);
			head.appendChild(linkElement);
		}

		@Override
		public void modifyBootstrapFragment(BootstrapFragmentResponse response)
		{
			// Wrap the fragment in a custom div element
			Element myDiv = new Element(Tag.valueOf("div"), "");
			List<Node> nodes = response.getFragmentNodes();
			for (Node node : nodes)
			{
				myDiv.appendChild(node);
			}
			nodes.clear();
			nodes.add(myDiv);
		}
	}

	@Override
	protected void servletInitialized() throws ServletException
	{
		super.servletInitialized();
		getService().addSessionInitListener(new SessionInitListener()
		{
			/**
			 *
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public void sessionInit(SessionInitEvent event)
			{
				// event.getSession().addBootstrapListener(new
				// BootstrapListener());
			}
		});
	}

}
