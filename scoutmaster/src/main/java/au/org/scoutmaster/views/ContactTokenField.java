package au.org.scoutmaster.views;import org.vaadin.tokenfield.TokenField;import au.org.scoutmaster.dao.ContactDao;import au.org.scoutmaster.dao.TagDao;import au.org.scoutmaster.domain.Contact;import au.org.scoutmaster.domain.Tag;import au.org.scoutmaster.editors.TagEditor;import au.org.scoutmaster.filter.EntityManagerProvider;import com.vaadin.addon.jpacontainer.JPAContainer;import com.vaadin.addon.jpacontainer.JPAContainerFactory;import com.vaadin.ui.Notification;import com.vaadin.ui.VerticalLayout;public class ContactTokenField<T> extends TokenField{	private static final long serialVersionUID = 1L;	private JPAContainer<Tag> tagContainer;	private Selected<T> selected;	public ContactTokenField(Selected<T> selected, String fieldLabel, VerticalLayout layout)	{		super(fieldLabel);		tagContainer = JPAContainerFactory.make(Tag.class, EntityManagerProvider.INSTANCE.getEntityManager());		this.setStyleName(TokenField.STYLE_BUTTON_EMPHAZISED);		// TODO: is this where we get the set of existing tokens?		this.setInputPrompt("");		setContainerDataSource(tagContainer);		this.selected = selected;	}	/**	 * The tokenId can either be a Long in which case it is the id of an entity	 * or can be a string in which case is the text the user typed in as the	 * token.	 */	@Override	protected void onTokenInput(Object tokenId)	{		TagDao daoTag = new TagDao();		if (tokenId instanceof String)		{			String[] tokenNames = ((String) tokenId).split(",");			for (String tokenName : tokenNames)			{				tokenName = tokenName.trim();				T contact = selected.getCurrent();				if (tokenName.length() > 0)				{					Tag tag = daoTag.findByName(tokenName);					if (tag != null)					{												// Now check if the Tag is already associated with the contact						ContactDao daoContact = new ContactDao();						if (daoContact.hasTag((Contact)contact, tag))							Notification.show(getTokenCaption(tag.getId()) + " is already associated with this contact");						else						{							daoContact.addTag((Contact)contact, tag);							daoContact.persist((Contact)contact);							this.addToken(tag.getId());						}					}					else					{						tag = new Tag(tokenName);						TagEditor<T> editor = new TagEditor<>(contact, tag, this);						getUI().addWindow(editor);					}				}			}		}		else		{			// The token Id is an Entity Id of type Long.			Long tagId = (Long) tokenId;			Tag tag = daoTag.findById(tagId);			if (tag != null)				Notification.show(getTokenCaption(tokenId) + " is already added");		}	}	@Override	protected void rememberToken(String tokenId)	{		String[] tokens = ((String) tokenId).split(",");		for (String token : tokens)		{			token = token.trim();			if (token.length() > 0)			{				super.rememberToken(token);			}		}	}}