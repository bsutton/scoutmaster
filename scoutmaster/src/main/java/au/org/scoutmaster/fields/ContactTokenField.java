package au.org.scoutmaster.fields;import java.util.Set;import org.vaadin.tokenfield.TokenField;import au.com.vaadinutils.editors.DialogListener;import au.org.scoutmaster.dao.DaoFactory;import au.org.scoutmaster.dao.TagDao;import au.org.scoutmaster.domain.BaseEntity;import au.org.scoutmaster.domain.Tag;import au.org.scoutmaster.editors.TagEditor;import au.org.scoutmaster.views.Selected;import com.vaadin.addon.jpacontainer.JPAContainer;import com.vaadin.ui.Button;import com.vaadin.ui.Notification;import com.vaadin.ui.VerticalLayout;import com.vaadin.ui.themes.Reindeer;public class ContactTokenField<T extends BaseEntity> extends TokenField{	private static final long serialVersionUID = 1L;	private JPAContainer<Tag> tagContainer;	@SuppressWarnings("unchecked")	public ContactTokenField(Selected<T> selected, String fieldLabel, VerticalLayout layout)	{		super(fieldLabel);		tagContainer = new DaoFactory().getTagDao().createVaadinContainer();		this.setStyleName(TokenField.STYLE_TOKENFIELD);		this.setInputPrompt("");		this.setContainerDataSource(tagContainer);		this.setConverter(Tag.class);	}	/**	 * Now check if the Tag is already exists in the property the field is bound	 * to.	 * 	 * @return true if the tag already is attached.	 */	boolean isTagAttached(Long tokenId)	{		@SuppressWarnings("unchecked")		Set<Long> set = (Set<Long>) getValue();		return (set != null && set.contains(tokenId));	}	/**	 * Called when the user hits 'enter' or the 'tab' key to indicate that they	 * have finished entering tags. The tokenId may contain one or more comma	 * separated tags or tag ids.	 * 	 * The tokenId can either be a Long in which case it is the id of an	 * existing tag entity or can be a string in which case it is the text the	 * user typed in as the token meaning that the tag does not already exist.	 */	@Override	protected void onTokenInput(Object tokenId)	{		if (tokenId instanceof String)		{			String[] tokenNames = ((String) tokenId).split(",");			for (String tokenName : tokenNames)			{				tokenName = tokenName.trim();				if (tokenName.length() > 0)				{					final TagDao daoTag = new DaoFactory().getTagDao();					// Does the tag exists					Tag tag = daoTag.findByName(tokenName);					if (tag != null)					{						// Now check if the Tag is already exists in the						// property the field is bound to.						if (isTagAttached(tag.getId()))						{							Notification									.show(getTokenCaption(tag.getId()) + " is already associated with this contact");						}						else						{							this.addToken(tag.getId());						}					}					else					{						// Tag doesn't exist so lets create one.						tag = new Tag(tokenName);						TagEditor editor = new TagEditor(tag, new DialogListener<Tag>()						{							@Override							public void confirmed(Tag tag)							{								// We MUST get our own DAO as this callback will								// happen in a different thread								// to the surrounding class.								final TagDao daoTag = new DaoFactory().getTagDao();								// user confirmed that they want to add the tag.								daoTag.persist(tag);								daoTag.flush();								// As its a new tag it mustn't exist on the								// contact so add it.								ContactTokenField.this.addToken(tag.getId());							}							@Override							public void declined()							{								// no-op							}						});						getUI().addWindow(editor);					}				}			}		}		else		{			// The token Id is an Entity Id of type Long.			final TagDao daoTag = new DaoFactory().getTagDao();			Long tagId = (Long) tokenId;			Tag tag = daoTag.findById(tagId);			if (tag != null)			{				// Now check if the Tag is already associated with the contact				if (isTagAttached(tag.getId()))				{					Notification.show(getTokenCaption(tag.getId()) + " is already associated with this contact");				}				else				{					this.addToken(tag.getId());				}			}			else				throw new IllegalStateException("Tag with id=" + tagId + " is missing from db.");		}	}	@Override	protected void rememberToken(String tokenId)	{		String[] tokens = ((String) tokenId).split(",");		for (String token : tokens)		{			token = token.trim();			if (token.length() > 0)			{				super.rememberToken(token);			}		}	}	// customize caption	protected void configureTokenButton(Object tokenId, Button button)	{		// custom caption		if (tokenId instanceof Tag)		{			Tag tag = (Tag) tokenId;			if (tag.getDetachable())			{				button.setCaption(tag.getName() + " x");				button.setDescription("Click to remove");			}			else				button.setCaption(tag.getName());			button.setIcon(getTokenIcon(tokenId));			button.setStyleName(Reindeer.BUTTON_LINK);		}		else if (tokenId instanceof Long)		{			Long tagid = (Long) tokenId;			TagDao daoTag = new DaoFactory().getTagDao();			Tag tag = daoTag.findById(tagid);			if (tag.getDetachable())			{				button.setCaption(tag.getName() + " x");				button.setDescription("Click to remove");			}			else				button.setCaption(tag.getName());			button.setIcon(getTokenIcon(tokenId));			button.setStyleName(Reindeer.BUTTON_LINK);		}		else			throw new IllegalArgumentException("Expected tokenId to be a Tag instead found a "					+ tokenId.getClass().getName());	}	/**	 * The users has clicked the token which we treat as a delete.	 */	@Override	protected void onTokenClick(Object tokenId)	{		Tag tag = (Tag) tokenId;		if (tag.getDetachable())		{			super.onTokenClick(tokenId);		}	}}